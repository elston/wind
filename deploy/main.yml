- name: application server
  hosts: 127.0.0.1
  connection: local
  vars:
    tools_dir: /srv/apps/tools
    MySQL_root_pass: ReplaceWithYourPassword
    apps_user: www-data
    n_processes: 4

  tasks:

  - name: set variables conditionally
    set_fact: apps_user=www-data
    when: ansible_os_family == "Debian"

  - name: set variables conditionally
    set_fact: apps_user=nobody
    when: ansible_os_family == "RedHat"

  - name: add R repository for fresh packages
    sudo: yes
    apt_repository: repo='deb https://cloud.r-project.org/bin/linux/ubuntu trusty/' state=present

  - name: Set MySQL root password before installing
    debconf: name='mysql-server' question='mysql-server/root_password' value='{{MySQL_root_pass | quote}}' vtype='password'

  - name: Confirm MySQL root password before installing
    debconf: name='mysql-server' question='mysql-server/root_password_again' value='{{MySQL_root_pass | quote}}' vtype='password'

  - name: install packages
    sudo: yes
    apt: name={{ item }} state=installed update_cache=yes force=yes
    with_items:
      - python-virtualenv
      - python-numpy
      - python-dev
      - build-essential
      - gfortran
      - nginx
      - libblas-dev
      - liblapack-dev
      - tk-dev
      - r-base
      - r-base-dev
      - redis-server
      - mysql-server
      - libmysqlclient-dev
      - python-mysqldb
      - nginx
    when: ansible_os_family == "Debian"

  - name: install packages
    sudo: yes
    yum: name={{ item }} state=installed
    with_items:
      - python-virtualenv
      - python-devel
      - gcc-gfortran
      - nginx
      - blas-devel
      - lapack-devel
      - autoconf
      - automake
      - binutils
      - bison
      - flex
      - gcc
      - gcc-c++
      - gettext
      - libtool
      - make
      - patch
      - pkgconfig
      - redhat-rpm-config
      - rpm-build
    when: ansible_os_family == "RedHat"

  - name: Deletes anonymous MySQL server user for localhost
    mysql_user: user="" state="absent" login_password="{{ MySQL_root_pass }}" login_user=root

  - name: Secures the MySQL root user
    mysql_user: user="root" password="{{ MySQL_root_pass }}" host="{{ item }}" login_password="{{MySQL_root_pass}}" login_user=root
    with_items:
      - 127.0.0.1
      - localhost
      - ::1
      - "{{ ansible_fqdn }}"

  - name: Removes the MySQL test database
    mysql_db: db=test state=absent login_password="{{ MySQL_root_pass }}" login_user=root

  - name: create a new database
    mysql_db: db=wind state=present login_password="{{ MySQL_root_pass }}" login_user=root

  - name: create database user 'wind' and password 'wind' with 'wind' database privileges
    mysql_user: name=wind password=wind priv=wind.*:ALL state=present login_password="{{ MySQL_root_pass }}" login_user=root

  - name: create virtualenv
    command: virtualenv env
    args:
      chdir: "{{ tools_dir }}"
      creates: env/bin/python

  - name: install numpy in venv
    command: env/bin/pip install numpy==1.9.1
    args:
      chdir: "{{ tools_dir }}"
      creates: env/lib/python2.7/site-packages/numpy/__init__.py

  - name: download lpsolve
    get_url:
      url: http://sourceforge.net/projects/lpsolve/files/lpsolve/5.5.2.0/lp_solve_5.5.2.0_source.tar.gz/download
      dest: /tmp/lp_solve_5.5.2.0_source.tar.gz
      validate_certs: False

  - name: unpack lpsolve
    command: tar xvfz lp_solve_5.5.2.0_source.tar.gz creates=lp_solve_5.5 chdir=/tmp

  - name: patch lpsolve
    lineinfile: dest=/tmp/lp_solve_5.5/lpsolve55/ccc regexp='isnan\(0\)' line='echo "main(){isnan(0.0);}">>/tmp/isnan.c'

  - name: build lpsolve
    command: sh ccc chdir=/tmp/lp_solve_5.5/lpsolve55 creates=bin/ux64/liblpsolve55.so

  - name: install lpsolve
    sudo: yes
    command: install lp_solve_5.5/lpsolve55/bin/ux64/liblpsolve55.so /usr/local/lib
    args:
      chdir: /tmp
      creates: /usr/local/lib/liblpsolve55.so
    register: install_lpsolve
    when: ansible_os_family == "Debian"

  - name: install lpsolve
    sudo: yes
    command: install lp_solve_5.5/lpsolve55/bin/ux64/liblpsolve55.a /usr/local/lib
    args:
      chdir: /tmp
      creates: /usr/local/lib/liblpsolve55.so
    register: install_lpsolve
    when: ansible_os_family == "Debian"

  - name: install lpsolve
    sudo: yes
    command: install lp_solve_5.5/lpsolve55/bin/ux64/{{ item }} /usr/lib64
    args:
      chdir: /tmp
      creates: /usr/local/lib/liblpsolve55.so
    with_items:
      - liblpsolve55.so
      - liblpsolve55.a
    register: install_lpsolve
    when: ansible_os_family == "RedHat"

  - name: update ldconfig
    sudo: yes
    command: ldconfig
    when: install_lpsolve|success

  - name: download lpsolve-python
    get_url:
      url: http://sourceforge.net/projects/lpsolve/files/lpsolve/5.5.2.0/lp_solve_5.5.2.0_Python_source.tar.gz/download
      dest: /tmp/lp_solve_5.5.2.0_Python_source.tar.gz
      validate_certs: False

  - name: unpack lpsolve-python
    command: tar xvfz lp_solve_5.5.2.0_Python_source.tar.gz creates=lp_solve_5.5/extra/Python chdir=/tmp

  - name: build lpsolve-python
    command: "{{ tools_dir }}/env/bin/python setup.py install"
    args:
      chdir: /tmp/lp_solve_5.5/extra/Python
      creates: "{{ tools_dir }}/env/lib/python2.7/site-packages/lpsolve55.so"

  - name: install main python requirements
    command: env/bin/pip install -r requirements.txt
    args:
        chdir: "{{ tools_dir }}"
#        creates: env/lib/python2.7/site-packages/flask

  - name: install gunicorn
    command: env/bin/pip install gunicorn
    args:
      chdir: "{{ tools_dir }}"
      creates: env/bin/gunicorn

  - name: create nginx config
    template: src=nginx_config.jinja2 dest=/etc/nginx/sites-available/wind
    register: nginx_reconfigured

  - name: enable wind site
    file: dest=/etc/nginx/sites-enabled/wind src=/etc/nginx/sites-available/wind state=link
    register: nginx_reconfigured

  - name: make sure that nginx works and enabled at boot
    service: name=nginx state=started enabled=yes

  - name: reload nginx if reconfigured
    service: name=nginx state=restarted
    when: nginx_reconfigured|changed

  - name: add wind-gunicorn to boot sequence
    template: src=wind-gunicorn.conf.jinja2 dest=/etc/init/wind-gunicorn.conf

  - name: start wind-gunicorn as service
    service: name=wind-gunicorn state=started enabled=yes

  - name: add wind-rqworker to boot sequence
    template: src=wind-rqworker.conf.jinja2 dest=/etc/init/wind-rqworker.conf

  - name: start wind-rqworker as service
    service: name=wind-rqworker state=started enabled=yes
